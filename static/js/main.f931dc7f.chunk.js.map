{"version":3,"sources":["components/Home.js","components/Title.js","components/SignUp.js","components/Menu.js","components/Login.js","components/Cart.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Home","users","titleUser","loggedIn","products","setTitleUser","useState","pForSale","setPForSale","i","length","isLoggedIn","userName","map","p","forSale","style","border","width","marginLeft","borderRadius","marginTop","name","price","paddingLeft","onClick","pIndex","findIndex","pro","plusButton","backgroundColor","color","Title","SignUp","addUser","password","user","setUser","value","onChange","e","target","changeName","type","pass","changePass","to","event","preventDefault","alert","Menu","userInLogged","handleClickedLiSU","onlyLoggedIn","Login","inputName","setInputName","inputPass","setInputPass","console","log","un","up","Cart","cart","cartList","filter","cp","total","Edit","addProduct","setPro","pName","pPrice","changePrice","App","setUsers","setProducts","lengte","usersIndex","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f931dc7f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom';\r\n\r\nexport default function Home({users,loggedIn,titleUser,setTitleUser,products}) {\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// סטייט של מערך מוצרים חדש. המערך הוא פיזור של מערך המוצרים המקורי.\r\n// יצרתי אותו כדי שרק המערך יתרנדר מחדש ולא כל האתר עם כל שינוי שיחול במערך בהמשך\r\n    const [pForSale,setPForSale]=useState([...products]);\r\n \r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n \r\n// פונצירה שתרוץ כאשר יש לחיצה על כפתור הפלוס. הפונצקיה מקבלת מוצר ספציפי שנבחר על ידי משתמש.\r\n// בודקת האם ברוכים הבאים זה אורח,כלומר, האם המשתמש מחובר למערכת. אם כן- לא ממשיכה.\r\n//  אם יש משתמש מחובר למערכת. יצרתי משתנה זמני שיכיל את המוצר. לאחר מכן שיניתי את שדה הלמכירה של המשתנה הזמני ל-שקר\r\n// לאחר מכן הגדרתי משתנה שיהיה האינדקס של המוצר שהשם שלו שווה לשם המוצר שהתקבל במערך המוצרים המקומי.\r\n//שיניתי את במוצר באינדקס המתאים בהתאם למוצר שהתקבל. לבסוף עשיתי סט למערך המקורי ופיזרתי אותו עם השינויים בתוכו.\r\n// התוצאה משנה כמובן גם את המערך המקורי שעכשיו המוצר שנבחר שנמצא בו, הוא לא למכירה יותר.\r\n const plusButton=(p)=>{\r\n    debugger;\r\nif (titleUser==='guest'){\r\n    return;\r\n}\r\n    let temp=p;\r\n    temp.forSale=false;\r\n    let pIndex=pForSale.findIndex(pro=>pro.name===p.name);\r\n    pForSale[pIndex].forSale=p.forSale;\r\n    setPForSale([...pForSale])\r\n    \r\n }\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n       \r\n// תנאי שבודק האם הברוכים הבאים שונה מאורח, כלומר האם יש משתמש אשר מחובר למערכת.\r\n// אם כן- תעבור על מערך המשתמשים ותבדוק, אם יש משתמש מחובר תשנה את הברוכים הבאים לשם המשתמש של המשתמש שמחובר\r\n// כרגע עדיין לא ברור העניין\r\n      if (titleUser!=='guest'){\r\n      for (let i=0;i<users.length;i++){\r\n        if (users[i].isLoggedIn===true){\r\n          setTitleUser=users[i].userName;\r\n        }\r\n    }\r\n      }\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// חשוב לשים לב איך עשיתי את המאפ. כל הג'אווהסקריפט בתוך מסולסליים מההתחלה ועד הסוף, חשוב לזכור זאת להמשך!\r\n    return (\r\n        <div>\r\n           <h2> welcome {titleUser}</h2>\r\n           <br/>\r\n           \r\n        {pForSale.map((p)=>{\r\n        if(p.forSale===true){\r\n        return (\r\n<div style={{border:'1px solid black' ,width:'300px',marginLeft:'390px',borderRadius:'3px',marginTop:'10px'}}>\r\n    <div>\r\n{'neme:'+p.name}\r\n{'   price:'+p.price}\r\n</div>\r\n<div style={{paddingLeft:'200px'}}>\r\n<button onClick={()=>plusButton(p)} style={{marginLeft:'40px',backgroundColor:'navy',color:'white'}}>+</button>\r\n</div>\r\n</div>\r\n\r\n        )\r\n    }})}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport {BrowserRouter as Router,Switch,Route, Link} from 'react-router-dom';\r\n\r\nexport default function Title() {\r\n    return (\r\n        <div>\r\n            <h1>Ron's Shop</h1>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function SignUp({ addUser }) {\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// יצרתי סטייט של אובייקט משתנה חדש. בהתחלה כל השדות ריקים ו-האם מחובר=שקר\r\n    const [user, setUser] = useState({\r\n        userName: '',\r\n        password: '',\r\n        isLoggedIn:false\r\n    })\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n//פונקציה אשם מקבלת אלמנט מהאינפוט כשמתבצע שינוי. יצרתי משתנה מקומי כדי להכיל את הערך הנוכחי שהוכנס לאינפוט\r\n// כדי לא לחכות לרינדור שיתבצע רק כאשר הפונקציה תסיים את הריצה שלה\r\n// לאחר מכן עדכנתי את הסטייט של אובייקט המשתמש החדש כאשר השם הוא המשתנה המקומי ושאר השדות הם כפי שהיו\r\n    const changeName = (e) => {\r\n        let name = e.target.value\r\n        setUser({\r\n            userName: name,\r\n            password: user.password,\r\n            isLoggedIn:user.isLoggedIn\r\n        })\r\n    }\r\n    \r\n//פונקציה אשם מקבלת אלמנט מהאינפוט כשמתבצע שינוי. יצרתי משתנה מקומי כדי להכיל את הערך הנוכחי שהוכנס לאינפוט\r\n// כדי לא לחכות לרינדור שיתבצע רק כאשר הפונקציה תסיים את הריצה שלה\r\n// לאחר מכן עדכנתי את הסטייט של אובייקט המשתמש החדש כאשר הסיסמא היא המשתנה המקומי ושאר השדות הם כפי שהיו\r\n    const changePass = (e) => {\r\n        let pass = e.target.value;\r\n        setUser({\r\n            userName: user.userName,\r\n            password: pass,\r\n            isLoggedIn:user.isLoggedIn\r\n        })\r\n    }\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// פונצקיה אשר מקבלת איבנט שיהיה לו שימוש בהמשך. הפונקציה תרוץ כאשר יש אירוע לחיצה על הלינק\r\n// בודקת האם השם שהוכנס הוא לא מחרוזת ריקה. אם הוא כן אז בעזרת איבנט חוסמת את המעבר לעמוד הבית ומציגה שגיאה.\r\n// אם הוא לא- קוראת לפונצקיה שמוסיפה משתמש חדש מ-אפ ושולחת אלייה את אובייקט המשתנה החדש \r\n    const add = ( event) => {\r\n        debugger;\r\n        if (user.userName===''){\r\n            event.preventDefault();\r\n            alert('Error') \r\n            return\r\n        }\r\n        addUser(user)     \r\n    }\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>sign up</h3>\r\n            <form>\r\n                <label>choose a user name:</label><br />\r\n                <input value={user.userName} onChange={e => changeName(e)} type=\"text\"></input>\r\n\r\n                <br />\r\n\r\n                <label>choose a password:</label><br />\r\n                <input value={user.password} onChange={e => changePass(e)} type=\"password\"></input>\r\n                <br />\r\n\r\n               <Link to='/' onClick={add}><button >sign up</button></Link> \r\n\r\n\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Menu({titleUser,users, userInLogged,setTitleUser}) {\r\n   \r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// פונציה שרצה כאשה יש לחיצה על לינק לעמוד ההתחברות או ההרשמה. הפונקציה מקבלת איבנט.\r\n// בודקת האם בכותרת ברוכים הבאים זה אורח.\r\n// אם זה לא אורח, כלומר, יש משתמש אשר מחובר למערכת היא חוסמת בעזרת איבנט את המעבר לעמוד \r\nconst handleClickedLiSU=(event)=>{\r\n    if (titleUser!=='guest'){\r\n        event.preventDefault();\r\n    }  \r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// פונציה שרצה כאשה יש לחיצה על לינק לעמוד העגלה או לאדיט. הפונקציה מקבלת איבנט.\r\n// בודקת האם בכותרת ברוכים הבאים זה אורח.\r\n// אם זה אורח, כלומר, אין משתמש אשר מחובר למערכת היא חוסמת בעזרת איבנט את המעבר לעמוד \r\nconst onlyLoggedIn=event=>{\r\n    if (titleUser==='guest'){\r\n        event.preventDefault();\r\n    }  \r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// פונקציה אשר תרוץ כאשר יש לחיצה על כפתור ההתנתקות. \r\n// בודקת האם בברוכים הבאים זה לא אורח, כלומר אם יש משתמש מחובר למערכת\r\n// אם כן אז היא עוברת על מערך המשתמשים והופכת את כולם ללא מחוברים. מכיוון שהחלטתי שרק משתמש אחד יכול להיות מחובר למערכת\r\n// כלומר, אף משתמש לא יהיה מחובר למערכת, למרות שבכל מקרה יש רק משתמש מחובר בכל פעם\r\n// לאחר מכן תשנה את כותרת הברוכים הבאים ל- אורח כמו בהתחלה\r\nconst handleLogOut=(user)=>{\r\n    if (titleUser!=='guest'){\r\n        for (let i=0;i<users.length;i++){\r\n            userInLogged({\r\n                userName: users[i].userName,\r\n                password: users[i].password,\r\n                isLoggedIn: false\r\n            })\r\n            setTitleUser('guest')\r\n        }\r\n    }\r\n}\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n            <Link to='/'><button>home</button></Link>\r\n            <Link to='/cart' onClick={onlyLoggedIn}><button>cart</button></Link>\r\n            </div>\r\n            <div>\r\n            <Link  to='/signup' onClick={handleClickedLiSU} ><button>sign up</button></Link>\r\n           <Link to='/login'onClick={handleClickedLiSU} > <button>log in</button></Link>\r\n            <Link  to='/edit' onClick={onlyLoggedIn}><button>edit</button></Link>\r\n            <button onClick={handleLogOut} >log out</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Login({ users, userInLogged }) {\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n//  יצרתי סטייטים לשני האינפוטים שיכילו את מה שמוכנס לאינפוט. בתחילה שניהם מוגדרים כמחרוזת ריקה \r\n    const [inputName, setInputName] = useState('');\r\n    const [inputPass, setInputPass] = useState('');\r\n\r\n// יצרתי סטייט חדש למשתמש לפי הנתונים כדי להכניס אליו את הנתונים שהוכנסו באינפוט\r\n    const [user, setUser] = useState({})\r\n    console.log(users)\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n//פונקציה אשם מקבלת אלמנט מהאינפוט כשמתבצע שינוי. יצרתי משתנה מקומי כדי להכיל את הערך הנוכחי שהוכנס לאינפוט\r\n// כדי לא לחכות לרינדור שיתבצע רק כאשר הפונקציה תסיים את הריצה שלה\r\n// לאחר מכן עדכנתי את הסטייט של השם והכנסתי לתוכו את המשתנה המקומי \r\n    const changeUserName = e => {\r\n        let un = e.target.value;\r\n        setInputName(un);\r\n    }\r\n\r\n//פונקציה אשם מקבלת אלמנט מהאינפוט כשמתבצע שינוי. יצרתי משתנה מקומי כדי להכיל את הערך הנוכחי שהוכנס לאינפוט\r\n// כדי לא לחכות לרינדור שיתבצע רק כאשר הפונקציה תסיים את הריצה שלה\r\n// לאחר מכן עדכנתי את הסטייט של הסיסמא והכנסתי לתוכו את המשתנה המקומי \r\n    const changePassword = e => {\r\n        let up = e.target.value;\r\n        setInputPass(up);\r\n    }\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// פונקציה אשם מקבלת אירוע. הפונקציה תרוץ כאשר יש לחיצה על הלינק. \r\n// בתחילה הפונקציה תעבור על מערך המשתמשים ותבדוק האם השם שהוכנס והסיסמא שהוכנסה קיימים במערך המשתמשים\r\n// אם כן- מעדכנת את הסטייט של המשמתמש המקומי, ומעדכנת את מערך המשתמשים בעזרת קריאה לפונקציה מ-אפ שמשנה את \r\n// האם מחובר של משתמש ספציפי. במקרה הזה, של עמוד ההתחברות היא משנה אותו ל-אמת\r\n// לאחר מכן יוצא מהפונקציה כי אנחנו לא רוצים להמשיך בה\r\n// אם אחד השם או הסיסמא לא קיימים במערך המשתמשים- חוסם את הלינק בעזרת איבנט, ומציג שגיאה.\r\n    const checkLogInDetails = (event) => {\r\n        debugger;\r\n        for (let i = 0; i < users.length; i++) {\r\n            if (users[i].userName === inputName && users[i].password === inputPass) {\r\n                setUser(users[i])\r\n                userInLogged({\r\n                    userName: users[i].userName,\r\n                    password: users[i].password,\r\n                    isLoggedIn: true\r\n                })\r\n                return;\r\n            }\r\n\r\n        }\r\n        event.preventDefault()\r\n        alert('Error!')\r\n    }\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>log in</h3>\r\n            <form>\r\n                <label>insert you user name:</label><br />\r\n                <input onChange={changeUserName}></input>\r\n                <br />\r\n                <label>insert your password</label><br />\r\n                <input type='password' onChange={changePassword}></input>\r\n                <br /><br />\r\n\r\n                <Link to='/' onClick={checkLogInDetails}><button>log in</button></Link>\r\n\r\n\r\n\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport {BrowserRouter as Router,Switch,Route, Link} from 'react-router-dom';\r\n\r\nexport default function Cart({products}) {\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// סטייט של מערך מוצרים חדש. המערך הוא פיזור של מערך המוצרים המקורי.\r\n// יצרתי אותו כדי שרק המערך יתרנדר מחדש ולא כל האתר עם כל שינוי שיחול במערך בהמשך\r\nconst [cart,setCart]=useState([...products])\r\n\r\n// יצרתי משתנה חדש מסוג מערך שהוא מערך המוצרים המקומי של העגלה ללא המוצרים שהם למכירה\r\n//filter- בעזרת פילטר סיננתי את המוצרים שהם למכירה ויצרתי מערך חדש של אלה שלא למכירה. בתוך הפילטר יש תנאי שאם \r\n// המוצר למכירה= אמת, אז אמת, - בפילטר, מה שאמת נכנס לתוך המערך החדש.\r\n// אם המוצר למכירה=אמת - שקר, כלומר לא נכנס למערך החדש והמסונן \r\nlet cartList=cart.filter(cp=>{\r\n    if (!cp.forSale){\r\n        return true;\r\n    }\r\n    else {return false}\r\n})\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// משתנה חדש מסוג מספר. בהתחלה הוא 0. משתנה זה ייצג את המחיר הכולל של כל המוצרים בעגלה\r\nlet total=0\r\n\r\n// כדי למצוא את המחיר הכולל של מוצרי העגלה- לולאה שעוברת על כל איברי המערך המפולטר.\r\n// בכל איטרציה מוסיפה את המחיר של המוצר במערך המפולטר לערך הנוכחי של טוטאל\r\nfor (let i=0;i<cartList.length;i++){\r\n    total=total+cartList[i].price;\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// פונקציה שרצה כאשר יש אירוע לחיצה על כפתור ה-קנה\r\n// מבצעת לולאה שרצה על כל איברי המערך המקומי שנוצר מהמערך המקורי ומשנה את כולם ל- למכירה=אמת. כדי לנקות את העגלה\r\n// לאחר מכן מציגה הודעה תודה רבה ויש מעבר לעמוד הבית\r\nconst buy=()=>{\r\n    for(let i=0;i<cart.length;i++){\r\n        cart[i].forSale=true;\r\n    }\r\n    alert('tnx bitch!')\r\n}\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n    return (\r\n        <div>\r\n            {cartList.map((cp)=>{\r\n                return(\r\n<div>\r\n    {'name: '+cp.name}\r\n    {' price: '+cp.price}\r\n</div>\r\n\r\n                )\r\n            }   \r\n            )}\r\n<h5>total:{total}</h5>\r\n\r\n<Link to='/' onClick={buy}><button>Buy</button></Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Edit({addProduct}) {\r\n\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n//יצרתי סטייט של מוצר. בהתחלה השדות ריקים ו-האם למכירה זה כן! כי כשנוסיף אותו נרצה שיופיע מייד בעמוד הבית כמוצר למכירה\r\nconst [pro,setPro]=useState({\r\n    name:'',\r\n    price:0,\r\n    forSale:true\r\n});\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n// פונקציה שמקבלת אלמנט מהאינפוט של השם. יצרתי משתנה מקומי של שם כדי להכיל את מה שהוקלד באינפוט באותו הרגע \r\n// בלי לחכות לרינדור מחדש שיקרה רק כאשר הפונקציה תסיים את הריצה שלה\r\n// לאחר מכן עשיתי סט לאובייקט המוצר החדש. השם הוא השם שהוכנס והשאר הם מה שהיו מקודם\r\nconst changeName=e=>{\r\nlet pName=e.target.value;\r\nsetPro({\r\n    name:pName,\r\n    price:pro.price,\r\n    forSale:pro.forSale\r\n})\r\n}\r\n\r\n// פונקציה שמקבלת אלמנט מהאינפוט של הסיסמא. יצרתי משתנה מקומי של סיסמא כדי להכיל את מה שהוקלד באינפוט באותו הרגע \r\n// בלי לחכות לרינדור מחדש שיקרה רק כאשר הפונקציה תסיים את הריצה שלה\r\n// לאחר מכן עשיתי סט לאובייקט המוצר החדש. הסיסמא היא הסיסמא שהוכנסה והשאר הם מה שהיו מקודם\r\nconst changePrice=e=>{\r\n    let pPrice=e.target.value;\r\n    setPro({\r\n        name:pro.name,\r\n        price:pPrice,\r\n        forSale:pro.forSale\r\n    })\r\n    }\r\n\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n//פונקציה להוספת מוצר ומקבלת ארגומנט \"איבנט\" בשביל ההמשך\r\n// הפונקציה תרוץ כאשר יש אירוע לחיצה על הלינק. לאחר מכן תבדוק את שם המוצר, אם לא נכתב כלום אז הלינק נחסם ולא נעבור לעמוד הבית\r\n//בנוסף תוצג הודעת שגיאה והפונקציה לא תרוץ יותר.\r\n// אם הכל בסדר עם השם אז הפונקציה תקרא לפונקציה מ-אפ ותשלח אלייה את אובייקט המוצר החדש. הפונקציה תוסיפ את המוצר שהתקבל למערך המוצרים\r\n    const addP = ( event) => {\r\n        debugger;\r\n        if (pro.userName===''){\r\n            event.preventDefault();\r\n            alert('Error') \r\n            return\r\n        }\r\n        addProduct(pro)       \r\n    }\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n//------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n<label>product name:</label><br/>\r\n<input onChange={e=>changeName(e)}></input><br/><br/>\r\n\r\n<label>product price:</label><br/>\r\n<input onChange={e=>changePrice(e)}></input>\r\n<br/><br/>\r\n\r\n<Link to='/' onClick={addP} ><button>add</button></Link>\r\n\r\n\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Title from \"./components/Title\";\nimport \"./App.css\";\nimport SignUp from \"./components/SignUp\";\nimport Menu from \"./components/Menu\";\nimport Login from \"./components/Login\";\nimport Cart from \"./components/Cart\";\nimport Edit from \"./components/Edit\";\n\nfunction App() {\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n\n  // מגדיר סטייט של מערך משתמשים. כל משתמש הוא אובייקט שמכיל: שם,סיסמא והאם מחובר\n  const [users, setUsers] = useState([\n    { userName: \"ron\", password: \"123\", isLoggedIn: false },\n  ]);\n\n  // מגדיר סטייט של כותרת ברוכים הבאים, כל עוד אף משתמש לא מחובר הסטייט הוא- אורח\n  const [titleUser, setTitleUser] = useState(\"guest\");\n\n  //מגדיר סטטיט של מערך מוצרים. כל מוצר הוא אובייקט שמכיל:שם, מחיר והאם למכירה\n  // בהתחלה כל המוצרים למכירה ומוצגים במסך הבית. כשמוצר הוא לא למכירה הוא מוצג בעגלה\n  const [products, setProducts] = useState([\n    { name: \"computer \", price: 100, forSale: false },\n    { name: \"pen \", price: 10, forSale: true },\n    { name: \"motorbike \", price: 5000, forSale: true },\n    { name: \"TV \", price: 250, forSale: true },\n    { name: \"couch \", price: 550, forSale: true },\n    { name: \"camera \", price: 700, forSale: true },\n    { name: \"knife \", price: 17, forSale: true },\n    { name: \"hammer \", price: 15, forSale: true },\n    { name: \"flashlight \", price: 85, forSale: true },\n  ]);\n\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n\n  // פונקציה להוספת משתמש למערך המשתמשים. הפונקציה הזו נשלחת לעמוד ההרשמה ומקבלת אובייקט משתמש ממנו\n  // כאשר יש ניסיון התחברות הפונקציה הזו בודקת בעזרת לולאה האם שם המשתמש שהוכנס קיים כבר במערך המשתמשים.\n  // אם קיים- יוצא מהפונקיה ולא ממשיך\n  //אם לא קיים- מפזר את המערך כי ליצור מערך חדש ומוסיף את המשתמש החדש לסוף המערך\n  const addUser = (user) => {\n    for (let i = 0; i < users.lengte; i++) {\n      if (users[i].userName === user.userName) {\n        return;\n      }\n    }\n    setUsers([...users, user]);\n  };\n\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n\n  //פונקציה אשר מקבלת משתמש מעמוד ההתחברות. והופכת את אותו משתמש ל-מחובר.\n  // מוצאת את המשתמש שהתקבל במערך המקורי בעזרת המתודה למציאת אינדקס\n  //findIndex- יצרתי משתנה חדש שיכיל את האינדקס של המשתמש ששם המשתמש שלו שווה בדיוק לשם המשתמש של המשתמש שהתקבל\n  // השתמשתי במשתנה שמייצג את האינדקס המתאים כדי לשנות את המערך ככה שהמשתמש המתאים יהפוך ל-מחובר\n  // בגלל שעכשיו יש משתמש מחובר למערכת, עשיתי סט לשם שנמצא בברוכים הבאים ושיניתי אותו לשם המשתמש של המשתמש שעכשיו מחובר\n\n  const userInLogged = (user) => {\n    debugger;\n    let usersIndex = users.findIndex((e) => e.userName === user.userName);\n    users[usersIndex].isLoggedIn = user.isLoggedIn;\n    setTitleUser(user.userName);\n  };\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n\n  // פונקציה אשר נשלחת ל-אדיט. הפונקציה מקבלת מוצר חדש מהקומפוננטה ובעזרת סט מוסיפה אותו למערך המוצרים\n  const addProduct = (pro) => {\n    setProducts([...products, pro]);\n  };\n\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n  //------------------------------------------------------------------------------------------------------------------------\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Title />\n        <Menu\n          users={users}\n          userInLogged={userInLogged}\n          setTitleUser={setTitleUser}\n          titleUser={titleUser}\n        />\n\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => (\n              <Home titleUser={titleUser} products={products} users={users} />\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/signup\"\n            component={() => <SignUp addUser={addUser} />}\n          />\n\n          <Route\n            exact\n            path=\"/login\"\n            component={() => (\n              <Login\n                titleUser={titleUser}\n                setTitleUser={setTitleUser}\n                users={users}\n                userInLogged={userInLogged}\n              />\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/cart\"\n            component={() => <Cart products={products} />}\n          />\n\n          <Route\n            exact\n            path=\"/edit\"\n            component={() => <Edit addProduct={addProduct} />}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}